def show_loading():
    print("\nSe încarcă", end="", flush=True)
    for _ in range(3):
        time.sleep(0.5)
        print(".", end="", flush=True)
    print()


LOADING_FRAMES = [
    """
    ⠋ Se încarcă
    """,
    """
    ⠙ Se încarcă
    """,
    """
    ⠹ Se încarcă
    """,
    """
    ⠸ Se încarcă
    """,
    """
    ⠼ Se încarcă
    """,
    """
    ⠴ Se încarcă
    """,
    """
    ⠦ Se încarcă
    """,
    """
    ⠧ Se încarcă
    """
]

class LoadingAnimation:
    def __init__(self):
        self.is_loading = False
        self.animation_thread = None
    
    def start(self):
        self.is_loading = True
        self.animation_thread = threading.Thread(target=self._animate)
        self.animation_thread.start()
    
    def stop(self):
        self.is_loading = False
        if self.animation_thread:
            self.animation_thread.join()
        sys.stdout.write("\r" + " " * 50 + "\r")  # Curăță linia
        sys.stdout.flush()
    
    def _animate(self):
        frame_index = 0
        while self.is_loading:
            sys.stdout.write(f"\r{LOADING_FRAMES[frame_index % len(LOADING_FRAMES)]}")
            sys.stdout.flush()
            frame_index += 1
            time.sleep(0.1)


def simulate_typing(text, delay=0.03):
    for char in text:
        print(char, end='', flush=True)
        time.sleep(delay)
    print()



class LoadingAnimation:
    def __init__(self):
        self.is_loading = False
        self.animation_thread = None
        self.frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧"]
    
    def start(self):
        self.is_loading = True
        self.animation_thread = threading.Thread(target=self._animate)
        self.animation_thread.start()
    
    def stop(self):
        self.is_loading = False
        if self.animation_thread:
            self.animation_thread.join()
        sys.stdout.write("\r" + " " * 30 + "\r")  # Curăță linia
        sys.stdout.flush()
    
    def _animate(self):
        frame_index = 0
        while self.is_loading:
            sys.stdout.write(f"\r{self.frames[frame_index % len(self.frames)]} Se încarcă...")
            sys.stdout.flush()
            frame_index += 1
            time.sleep(0.1)

#SMOOTH LOADING

class LoadingAnimation:
    def __init__(self):
        self.is_loading = False
        self.thread = None
        self.frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧"]
        self.text = "Se încarcă "
        self.spin_speed = 0.12
        self.frame_len = 1  # lungimea unui singur caracter animat
    
    def start(self):
        if not self.is_loading:
            self.is_loading = True
            print(self.text, end=" ", flush=True)  # Afișează textul static
            self.thread = threading.Thread(target=self._animate, daemon=True)
            self.thread.start()
    
    def stop(self):
        if self.is_loading:
            self.is_loading = False
            if self.thread:
                self.thread.join()
            self._clean()
    
    def _animate(self):
        while self.is_loading:
            for frame in self.frames:
                if not self.is_loading:
                    break
                # Backspace pentru pozitionare corectă
                sys.stdout.write(f"\b{frame}")
                sys.stdout.flush()
                time.sleep(self.spin_speed)
    
    def _clean(self):
        # Șterge textul + animația (calculăm spațiul total)
        total_length = len(self.text) + 1 + self.frame_len
        sys.stdout.write("\b" * total_length + " " * total_length + "\b" * total_length)
        sys.stdout.flush()
